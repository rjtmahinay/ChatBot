package com.ai;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Aspire
 */
public class User extends javax.swing.JFrame {

    String lastEntered = "";

    /**
     * Creates new form User
     */
    public User() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        textField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EllenBot");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        panel.setBackground(new java.awt.Color(51, 51, 51));

        textField.setBackground(new java.awt.Color(51, 51, 51));
        textField.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        textField.setForeground(new java.awt.Color(255, 255, 255));
        textField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });

        textPane.setEditable(false);
        textPane.setBackground(new java.awt.Color(51, 51, 51));
        textPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        textPane.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        jScrollPane1.setViewportView(textPane);

        jPanel1.setBackground(new java.awt.Color(0, 255, 102));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        jLabel1.setText("Chat Again");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        Bot bot = new Bot();
        String text = textField.getText();

        int random = (int) (Math.random() * 3 + 1);

        StyledDocument doc = textPane.getStyledDocument();
        SimpleAttributeSet attr = new SimpleAttributeSet();
        StyleConstants.setAlignment(attr, StyleConstants.ALIGN_RIGHT);
        StyleConstants.setForeground(attr, Color.white);
        try {
            int length = doc.getLength();
            doc.insertString(doc.getLength(), "You: " + text + "\n", null);
            doc.setParagraphAttributes(length + 1, 1, attr, false);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }

        //put last entered in the textfield
        lastEntered = text;
        textField.setText("");

        ArrayList<String> premises = new ArrayList();
        ArrayList<String> conclu = new ArrayList();

        //load the knowledge
        String data = "";
        File myFile = new File("data.txt");
        try {
            Scanner s = new Scanner(new FileReader(myFile.getPath()));
            while (s.hasNext()) {
                data += s.nextLine();
            }
        } catch (IOException ioe) {
        }

        if (text.equalsIgnoreCase("goodbye") || text.contains("goodbye")
                || lastEntered.equalsIgnoreCase("good bye") || lastEntered.contains("good bye")
                || lastEntered.equalsIgnoreCase("bye") || lastEntered.contains("bye")) {
            if (random == 1) {
                bot.botChat("See you later", textPane);
            } else if (random == 2) {
                bot.botChat("Nice talking to you", textPane);
            } else if (random >= 3) {
                bot.botChat("Goodbye", textPane);
            }
            textField.disable();
        } else if (text.equalsIgnoreCase("hi")
                || text.equalsIgnoreCase("hello") || text.contains("hello")) {
            BackChain bc = new BackChain("Ellen", data);
            String prove = bc.start(textPane);
            if (prove.toLowerCase().equals("yes")) {
                bot.botChat("My name is Ellen", textPane);
            } else {
                bot.botChat("I don't know who am I", textPane);
            }
        } else {
            //read rules
            String[] rules = data.split(";");
            for (int i = 0; i < rules.length; i++) {
                String[] r = rules[i].split("=>");
                premises.add(r[0]);
                conclu.add(r[1]);
            }
            //seperation of & in premises
            ArrayList<String> sepPremData = new ArrayList<>();
            String[] sepPrem = {};
            for (int i = 0; i < premises.size(); i++) {
                if (premises.get(i).contains("&")) {
                    sepPrem = premises.get(i).split("&");
                    if (sepPremData.isEmpty()) {
                        sepPremData.add(sepPrem[0].trim());
                        sepPremData.add(sepPrem[1].trim());
                    } else {
                        boolean same0 = false, same1 = false;
                        for (int j = 0; j < sepPremData.size(); j++) {
                            if (sepPrem[0].trim().equals(sepPremData.get(j).trim())) {
                                same0 = true;
                            }
                            if (sepPrem[1].trim().equals(sepPremData.get(j).trim())) {
                                same1 = true;
                            }
                        }
                        if (!same0) {
                            sepPremData.add(sepPrem[0].trim());
                        }
                        if (!same1) {
                            sepPremData.add(sepPrem[1].trim());
                        }
                    }
                } else if (sepPremData.isEmpty()) {
                    sepPremData.add(premises.get(i));
                } else {
                    boolean same = false;
                    for (int k = 0; k < sepPremData.size(); k++) {
                        if (premises.get(i).trim().equals(sepPremData.get(k).trim())) {
                            same = true;
                        }
                    }
                    if (!same) {
                        sepPremData.add(premises.get(i));
                    }
                }
            }
            //get keyword in the sentence
            ArrayList<String> keyword = new ArrayList();
            for (int i = 0; i < sepPremData.size(); i++) {
                if (text.toLowerCase().contains(sepPremData.get(i).toLowerCase())) {
                    keyword.add(sepPremData.get(i));
                }
            }
            String inputPrem = "";
            if (keyword.size() == 1) {
                inputPrem = keyword.get(0);
            } else if (keyword.size() > 1) {
                for (int i = 0; i < keyword.size(); i++) {
                    if (i == keyword.size() - 1) {
                        inputPrem += keyword.get(i);
                    } else {
                        inputPrem += keyword.get(i) + "&";
                    }
                }
            }
            //get the conclusion from the inputPrem
            int count = 0;
            ArrayList<String> conc = new ArrayList<>();
            for (int i = 0; i < premises.size(); i++) {
                if (premises.get(i).toLowerCase().equals(inputPrem.toLowerCase())) {
                    boolean same = false;
                    for (int j = 0; j < conc.size(); j++) {
                        if (conc.get(j).trim().equals(conclu.get(i).trim())) {
                            same = true;
                        }
                    }
                    if (!same) {
                        conc.add(conclu.get(i));
                    }
                }
                if (i == premises.size() - 1) {
                    if (count == 1) {
                        break;
                    } else {
                        if (inputPrem.contains("&")) {
                            String[] temp = inputPrem.split("&");
                            inputPrem = temp[1] + "&" + temp[0];
                            i = 0;
                            count++;
                        }
                    }
                }
            }
            if (conc.isEmpty()) {
                int ran = (int) (Math.random() * 3 + 1);
                if (ran == 1) {
                    bot.botChat("I didn't understand your question, can you teach me?", textPane);
                } else if (ran >= 2) {
                    bot.botChat("I can't comprehend, can you teach me?", textPane);
                }
                String key = JOptionPane.showInputDialog(null, "What is the KEYWORD in the question?");
                String ans = JOptionPane.showInputDialog(null, "What is the ANSWER in the question?");
                if (!key.isEmpty() & !ans.isEmpty()) {
                    String learn = key + "=>" + ans + ";";
                    try (FileWriter fw = new FileWriter("data.txt", true);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter out = new PrintWriter(bw)) {
                        out.print("\n" + learn);
                    } catch (IOException e) {
                        //exception handling left as an exercise for the reader
                    }
                    bot.botChat("Thank you for the information", textPane);
                }
            }
            for (int i = 0; i < conc.size(); i++) {
                BackChain bc = new BackChain(conc.get(i), data);
                String prove = bc.start(textPane);
                if (prove.equalsIgnoreCase("yes")) {
                    bot.botChat(conc.get(i), textPane);
                } else {
                    bot.botChat("Sorry I don't have brain", textPane);
                }
            }

            //if answerable by yes or no
            String[] input = text.split(" ");
            if (input[0].toLowerCase().equals("is") || input[0].toLowerCase().equals("are")) {
                bot.botChat("For future works", textPane);
            }
        }
    }//GEN-LAST:event_textFieldActionPerformed

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jPanel1MousePressed
    {//GEN-HEADEREND:event_jPanel1MousePressed
        if (lastEntered.equalsIgnoreCase("goodbye") || lastEntered.contains("goodbye")
                || lastEntered.equalsIgnoreCase("good bye") || lastEntered.contains("good bye")
                || lastEntered.equalsIgnoreCase("bye") || lastEntered.contains("bye")) {
            textField.enable();
            textPane.setText("");
        }
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jPanel1MouseEntered
    {//GEN-HEADEREND:event_jPanel1MouseEntered
        jPanel1.setBackground(new Color(204, 204, 204));
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jPanel1MouseExited
    {//GEN-HEADEREND:event_jPanel1MouseExited
        jPanel1.setBackground(new Color(0, 255, 102));
    }//GEN-LAST:event_jPanel1MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField textField;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
